import sys
import psutil
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from tkinter import *
from tkinter import messagebox
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import random

# Set matplotlib style to dark mode
plt.style.use('dark_background')

# Initialize current_plot variable
current_plot = ""

# Function to authenticate user login
def authenticate(username, password):
    # Hardcoded username and password (replace with actual authentication logic)
    valid_username = "admin"
    valid_password = "password"

    if username == valid_username and password == valid_password:
        return True
    else:
        return False

# Function to handle login button click
def login_click():
    # Get username and password from entry fields
    entered_username = username_entry.get()
    entered_password = password_entry.get()

    # Authenticate user
    if authenticate(entered_username, entered_password):
        # If authentication successful, show main application window
        login_window.destroy()
        show_main_window()
    else:
        # If authentication fails, show error message
        messagebox.showerror("Login Failed", "Invalid username or password")

# Function to display main application window after successful login
def show_main_window():
    # Initialize the tkinter GUI
    root = Tk()
    root.title('Raspberry Pi Dashboard')
    root.geometry('1200x800')

    # Set background color
    root.configure(bg='#121212')

    # Create frame for navigation menu
    navigation_frame = Frame(root, bg='#121212')
    navigation_frame.pack(side=LEFT, fill=Y)

    # Add buttons to the navigation menu
    buttons = [
        ("Traffic Flow Graphs", "Traffic Flow Graphs"),
        ("Bandwidth Usage Graphs", "Bandwidth Usage Graphs"),
        ("Network Activity Timeline", "Network Activity Timeline"),
        ("Alert Trends", "Alert Trends"),
        ("Sensor Data Graphs", "Sensor Data Graphs"),
        ("Packet Capture Statistics", "Packet Capture Statistics")
    ]

    for btn_text, plot_name in buttons:
        btn = Button(navigation_frame, text=btn_text, command=lambda plot_name=plot_name: button_click(plot_name),
                     bg='#323232', fg='white')
        btn.pack(fill=X, pady=5)

    # Initialize matplotlib figure and axis
    fig = plt.Figure(figsize=(12, 12), facecolor='#121212')
    gs = fig.add_gridspec(3, 2)
    ax1 = fig.add_subplot(gs[0, :])
    ax2 = fig.add_subplot(gs[1, :])
    ax3 = fig.add_subplot(gs[2, 0])
    ax4 = fig.add_subplot(gs[2, 1])

    # Embed the plot into tkinter GUI
    canvas = FigureCanvasTkAgg(fig, master=root)
    canvas.get_tk_widget().pack(side=RIGHT, fill=BOTH, expand=1)

    # Function to update plots
    def update_plots(frame):
        global current_plot  # Add this line
        if current_plot == "Traffic Flow Graphs":
            update_traffic_flow_graphs(frame, ax1)
        elif current_plot == "Bandwidth Usage Graphs":
            update_bandwidth_usage_graphs(frame, ax2)
        elif current_plot == "Network Activity Timeline":
            update_network_activity_timeline(frame, ax3)
        elif current_plot == "Alert Trends":
            update_alert_trends(frame, ax4)
        elif current_plot == "Sensor Data Graphs":
            update_sensor_data_graphs(frame, ax1)
        elif current_plot == "Packet Capture Statistics":
            update_packet_capture_statistics(frame, ax2)

    # Function to start animation
    def start_animation():
        ani = animation.FuncAnimation(fig, update_plots, interval=1000, save_count=100, cache_frame_data=False)
        canvas.draw()

    # Call start_animation() after the GUI has been initialized
    start_animation()

    # Run the tkinter event loop
    root.mainloop()

# Function to update Traffic Flow Graphs plot
def update_traffic_flow_graphs(frame, ax):
    # Sample data for traffic flow graphs
    traffic_data = [random.randint(0, 100) for _ in range(10)]
    ax.clear()
    ax.plot(traffic_data, label='Traffic Flow', color='cyan', marker='o')
    ax.set_title('Traffic Flow Graphs', color='white')
    ax.set_xlabel('Time', color='white')
    ax.set_ylabel('Traffic', color='white')
    ax.legend()

# Function to update Bandwidth Usage Graphs plot
def update_bandwidth_usage_graphs(frame, ax):
    # Sample data for bandwidth usage graphs
    bandwidth_data = [random.randint(0, 100) for _ in range(10)]
    ax.clear()
    ax.bar(range(len(bandwidth_data)), bandwidth_data, color='magenta', label='Bandwidth Usage')
    ax.set_title('Bandwidth Usage Graphs', color='white')
    ax.set_xlabel('Time', color='white')
    ax.set_ylabel('Usage', color='white')
    ax.legend()

# Function to update Network Activity Timeline plot
def update_network_activity_timeline(frame, ax):
    # Sample data for network activity timeline
    activity_data = [random.randint(0, 100) for _ in range(10)]
    ax.clear()
    ax.plot(activity_data, label='Network Activity', color='yellow', marker='s')
    ax.set_title('Network Activity Timeline', color='white')
    ax.set_xlabel('Time', color='white')
    ax.set_ylabel('Activity', color='white')
    ax.legend()

# Function to update Alert Trends plot
def update_alert_trends(frame, ax):
    # Sample data for alert trends
    alert_data = [random.randint(0, 1) for _ in range(10)]
    ax.clear()
    ax.bar(range(len(alert_data)), alert_data, color='orange', label='Alert Trends')
    ax.set_title('Alert Trends', color='white')
    ax.set_xlabel('Time', color='white')
    ax.set_ylabel('Alerts', color='white')
    ax.legend()

# Function to update Sensor Data Graphs plot
def update_sensor_data_graphs(frame, ax):
    # Sample data for sensor data graphs
    sensor_data = [random.randint(0, 100) for _ in range(10)]
    ax.clear()
    ax.scatter(range(len(sensor_data)), sensor_data, label='Sensor Data', color='green')
    ax.set_title('Sensor Data Graphs', color='white')
    ax.set_xlabel('Time', color='white')
    ax.set_ylabel('Data', color='white')
    ax.legend()

# Function to update Packet Capture Statistics plot
def update_packet_capture_statistics(frame, ax):
    # Sample data for packet capture statistics
    packet_data = [random.randint(0, 100) for _ in range(10)]
    ax.clear()
    ax.plot(packet_data, label='Packet Capture', color='blue', linestyle='dashed')
    ax.set_title('Packet Capture Statistics', color='white')
    ax.set_xlabel('Time', color='white')
    ax.set_ylabel('Packets', color='white')
    ax.legend()

# Function to handle button clicks
def button_click(plot_name):
    global current_plot
    current_plot = plot_name

# Create login window
login_window = Tk()
login_window.title("Login")
login_window.geometry("300x150")
login_window.configure(bg='#121212')

# Username label and entry field
username_label = Label(login_window, text="Username:", bg='#121212', fg='white')
username_label.grid(row=0, column=0, padx=10, pady=5, sticky="e")
username_entry = Entry(login_window)
username_entry.grid(row=0, column=1, padx=10, pady=5)

# Password label and entry field
password_label = Label(login_window, text="Password:", bg='#121212', fg='white')
password_label.grid(row=1, column=0, padx=10, pady=5, sticky="e")
password_entry = Entry(login_window, show="*")
password_entry.grid(row=1, column=1, padx=10, pady=5)

# Login button
login_button = Button(login_window, text="Login", command=login_click, bg='#323232', fg='white')
login_button.grid(row=2, column=0, columnspan=2, pady=10)

# Run the login window event loop
login_window.mainloop()

